package wooga.gradle.plugins.internal

class AutogeneratedGroovyFile {
    static final String AUTOGENERATION_WARNNING = "//This file is generated by atlas-plugins, " +
            "\n//the [autogenerated] block will be replaced when gradle runs, " +
            "\n//the remainder of the file can be edited as you like, " +
            "\n//as long as the [autogenerated] and [/autogenerated] commentaries aren't removed."

    static final String GENERATED_CODE_UPPER_BOUND = "//[autogenerated]"
    static final String GENERATED_CODE_LOWER_BOUND = "//[/autogenerated]"

    final File baseFile

    static AutogeneratedGroovyFile getOrCreate(File targetFile) {
        if(targetFile.file &&
                targetFile.text.contains(GENERATED_CODE_UPPER_BOUND) &&
                targetFile.text.contains(GENERATED_CODE_LOWER_BOUND)) {
            return new AutogeneratedGroovyFile(targetFile)
        } else {
            return createEmpty(targetFile)
        }
    }


    static AutogeneratedGroovyFile createEmpty(File file) {
        if(file.file) {
            file.delete()
        }
        //Nebula test wants to test subprojects but actually doesn't create their dir. Sigh.
        file.parentFile.mkdirs()
        file.createNewFile()
        file << AUTOGENERATION_WARNNING
        file << "\n\n"
        file << GENERATED_CODE_UPPER_BOUND
        file << "\n"
        file << GENERATED_CODE_LOWER_BOUND
        file << "\n"
        return new AutogeneratedGroovyFile(file)
    }

    private AutogeneratedGroovyFile(File configFile) {
        this.baseFile = configFile
    }

    def writeAutogenerated(String newContents) {
        def configContents = baseFile.text
        def (beginIndex, endIndex) = autogeneratedCodeBounds()
        def currentContents = configContents.substring(beginIndex, endIndex)

        def contents = currentContents + newContents
        overwriteAutogenerated(contents)
    }

    def overwriteAutogenerated(String override) {
        def configContents = baseFile.text
        def(beginIndex, endIndex) = autogeneratedCodeBounds()
        def before = configContents.substring(0, beginIndex)
        def after = configContents.substring(endIndex)

        def newContent = [before, override, after].join("\n")
        baseFile.text = newContent
    }

    private def autogeneratedCodeBounds() {
        def configContents = baseFile.text
        def beginIndex = configContents.indexOf(GENERATED_CODE_UPPER_BOUND) + GENERATED_CODE_UPPER_BOUND.length()
        def endIndex = configContents.indexOf(GENERATED_CODE_LOWER_BOUND)
        return [beginIndex, endIndex]
    }
}
