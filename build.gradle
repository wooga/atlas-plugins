/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'groovy'
    id 'idea'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'nebula.release' version '5.0.0'
    id 'jacoco'
    id "com.github.kt3k.coveralls" version "2.8.2"
}

group 'net.wooga.gradle'
description = 'Plugin for wooga gradle plugin development.'

pluginBundle {
    website = 'https://plugins.com/wooga/atlas-plugins'
    vcsUrl = 'https://plugins.com/wooga/atlas-plugins'
    tags = ['plugins', 'publishing', 'internal']

    plugins {
        plugins {
            id = 'net.wooga.plugins'
            displayName = 'Wooga internal plugin to bootstrap plugin development'
            description = 'This plugin provides tasks and basic setup for other plugins'
        }
    }
}

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/groovy')
        }
        resources.srcDir 'src/integrationTest/resources'
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

idea.module {
    testSourceDirs += file('src/integrationTest/groovy')
    scopes.TEST.plus += [configurations.integrationTestCompile]
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    testCompile('junit:junit:4.11')
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }

    testCompile 'com.netflix.nebula:nebula-test:latest.release'

    testCompile 'com.github.stefanbirkner:system-rules:1.16.0'

    compile 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    compile 'com.gradle.publish:plugin-publish-plugin:0.9.9'
    compile 'com.netflix.nebula:nebula-release-plugin:5.0.0'

    compile gradleApi()
    compile localGroovy()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    executionData(test)
    executionData(integrationTest)
}

tasks.coveralls {
    onlyIf {System.getenv("CI")}
}

project.tasks.releaseCheck.dependsOn project.tasks.check
project.tasks.release.dependsOn project.tasks.assemble

project.tasks.final.dependsOn project.tasks.publishPlugins
project.tasks.publishPlugins.mustRunAfter project.tasks.postRelease

project.tasks.snapshot.dependsOn project.tasks.publishToMavenLocal

project.tasks.publishToMavenLocal.mustRunAfter project.tasks.postRelease